from typing import *


"""
动态规划:
1. dp数组下标含义：dp[i]表示爬到第i层有几种方法
2. 递推公式：dp[i] = dp[i - 2] + dp[i - 1]
    即第i层可以从
        1. i-2层再 + 一次走2步
        2. i-1层 + 一次走1步
    因为走的这2步或1步都是加在到i-2和i-1层的不同方法后面的，所以不算新方法，直接就是到i-2和i-1层的方法求和
3. 初始化：到第1层就一种方法（dp[1] = 1）;按递推公式，比如我们看dp[2]，一次爬一阶就是dp[2-1] = dp[1] = 1种方法，
    一次爬两阶就是dp[2-2] = dp[0]，也应该算一种方法，所以我们初始化dp[0]也等于1！
    （当然，也可以直接不管dp[0]，直接初始化dp[1]和dp[2]，然后从第3阶楼梯开始遍历）
4. 遍历顺序：正序遍历
"""
class Solution:
    def climbStairs(self, n: int) -> int:
        dp = [0] * (n + 1)  # 1-index
        dp[0] = 1
        dp[1] = 1
        for i in range(2, n + 1):
            dp[i] = dp[i - 1] + dp[i - 2]
        return dp[n]









