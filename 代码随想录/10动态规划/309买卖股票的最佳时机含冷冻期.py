from typing import *


"""
买卖股票1：最多买卖1次
买卖股票2：买卖无限次
买卖股票3：最多买卖2次
买卖股票4：最多买卖k次

买卖股票含冷冻期：买卖无限次，但加入了冷冻期限制，即卖出一次后第二天不能买入
唯一改动的就是持有状态中的当天买入的情况：因为当天买入，昨天不能卖出（即不持有状态），所以时前天不持有状态+今天买入，也就是i-1换成i-2即可！
此方法证明起来难，但是对的，就记这个最直接！
"""
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        # 初始化
        dp = [[0, 0] for _ in range(n)]
        dp[0][0], dp[0][1] = -prices[0], 0  # 和买卖股票2一样：[持有，不持有]
        for i in range(1, n):
            # 唯一改动的就是持有状态中的当天买入的情况：因为当天买入，昨天不能卖出（即不持有状态），所以时前天不持有状态+今天买入，也就是i-1换成i-2即可！
            if i - 2 >= 0:
                dp[i][0] = max(dp[i - 1][0], dp[i - 2][1] - prices[i])
            else:  # 注意，得考虑i-2为-1的情况，按0-index讲，第1天的前一天是第-1天，还没有操作，所以第-1天不持有能获得的最大利润就是0，直接把dp[i - 2][1]替换成0即可
                dp[i][0] = max(dp[i - 1][0], -prices[i])
            dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] + prices[i])
        return max(dp[n - 1][0], dp[n - 1][1])


