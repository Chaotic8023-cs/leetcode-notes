from typing import *
from collections import deque


"""
栈：本题用栈更容易理解
用stack来记录未匹配的左括号下标，同时，栈最左边多一个元素用来记录当前这段匹配的起点，一开始为-1。
我们遍历s：
    1. 如果s[i] == '('：则把当前左括号的下标i压入stack
    2. 如果s[i] == ')'：先pop掉一个
        1 > 如果此时栈不为空，则说明pop掉的就是匹配的左括号，那么此时栈顶就是这段匹配的起始位置，所以当前这段匹配的长度就是i - stack[-1]
        2 > 如果此时栈为空，则说明刚才pop掉的是本段匹配的其实位置，当前右括号没有对应的左括号，所以本段匹配结束，下段匹配开始，把当前右括号的下标压入栈中作为下一段匹配的起始位置
什么是起始位置？：其实位置是一段括号匹配的起点，是第一个左括号左边一位，这样每次遍历到右括号时如果能匹配，则直接减去其实位置就刚好是当前这段匹配的长度。

按“段”，或者跟session的思想一样，只要当前匹配一直成功，那么之前所有匹配成功的括号都会pop出去，遇到本段最后一个右括号时，长度是按本段匹配最开始
起始位置算的。同时，在之前所有匹配成功的括号中，每成功一次，长度按当时的栈顶算，即当时匹配上的左括号的左边一位，也就是说本段匹配中只要成功，则长度
一直递增。

例子："(()()))()"，初始时stack = [-1]      下标：0( 1( 2) 3( 4) 5) 6) 7( 8)
i = 0：左括号，下标压入栈 -> [-1, 0]
i = 1：左括号，下标压入栈 -> [-1, 0, 1]
i = 2：右括号，先pop -> 1, stack = [-1, 0]，pop后栈不为空，说明pop掉的为匹配上的左括号，此时匹配起点为栈顶0，所以匹配长度 = i - stack[-1] = 2 - 0 = 2
i = 3：左括号，下标压入栈 -> [-1, 0, 3]
i = 4：右括号，先pop -> 3, stack = [-1, 0]，pop后栈不为空，说明pop掉的为匹配上的左括号，此时匹配起点为栈顶0，所以匹配长度 = i - stack[-1] = 4 - 0 = 4
i = 5：右括号，先pop -> 0, stack = [-1]，pop后栈不为空，说明pop掉的为匹配上的左括号，此时匹配起点为栈顶-1，所以匹配长度 = i - stack[-1] = 5 - -1 = 6
i = 6：右括号，先pop -> -1, stack = []，pop后栈为空，说明pop掉的为本段匹配的起点，当前右括号没有对应的左括号了，所以本段匹配结束，把当前下标压入栈中作为下一段匹配的起点 -> stack = [6]
i = 7：左括号，下标压入栈 -> [6, 7]
i = 8：右括号，先pop -> 7, stack = [6]，pop后栈不为空，说明pop掉的为匹配上的左括号，此时匹配起点为栈顶6，所以匹配长度 = i - stack[-1] = 8 - 6 = 2

我们发现，匹配是按一个“session”一个“session”进行的，在一个session中，每次成功后长度是递增的。当第一次比配不成功时，本段session结束，记录下一段session的起点，
然后开始下一段匹配。这样保证了连续性，还能正确计算匹配括号的长度。
"""
class Solution:
    def longestValidParentheses(self, s: str) -> int:
        stack = deque([-1])
        n = len(s)
        ans = 0
        for i in range(n):
            if s[i] == '(':
                stack.append(i)
            else:  # 右括号
                stack.pop()
                if stack:  # 如果stack还有元素，则说明刚才pop掉的是用来匹配当前右括号的左括号，那么此时栈顶就是当前这段匹配的起点
                    ans = max(ans, i - stack[-1])
                else:
                    stack.append(i)
        return ans


if __name__ == '__main__':
    sol = Solution()
    s = "(()()"
    print(sol.longestValidParentheses(s))





